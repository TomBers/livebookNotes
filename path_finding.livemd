# Pathfinding

## A* Path finding algorithm

### Why?

Path finding is all about finding a route through a maze.  From a given start point to a given end point.  It will find its way past obsticles, and discover the most direct route.

This has applications in a number of areas from computer games to real world directions.

[Background](https://en.wikipedia.org/wiki/A*_search_algorithm)

## The Maze

We want to think about how we go about representing a maze.  It will be a 2-D grid with an x, y value, and indicators for walls, start and end point.

Just like the Game of Life example, lets try having a structure for the cells and one for the maze.

```elixir
defmodule Cell do
  defstruct x: nil, y: nil, type: nil

  @wall_type :wall
  @end_type :end_cell
  @start_type :start_cell

  def wall_type do
    @wall_type
  end

  def end_type do
    @end_type
  end

  def is_wall(cell) do
    cell.type == @wall_type
  end

  def is_end(cell) do
    cell.type == @end_type
  end

  def is_start(cell) do
    cell.type == @start_type
  end
end
```

```elixir
defmodule Maze do
  defstruct cells: [], x: 0, y: 0

  def initialise_maze(x, y, start_coords, end_coords, walls) do
    cells =
      for i <- y..1,
          j <- 1..x,
          do: %Cell{x: i, y: j, type: find_type({j, i}, start_coords, end_coords, walls)}

    %Maze{x: x, y: y, cells: cells}
  end

  def find_type(current, start_coords, _end_coords, _walls) when current == start_coords do
    :start_cell
  end

  def find_type(current, _start_coords, end_coords, _walls) when current == end_coords do
    :end_cell
  end

  def find_type(current, _start_coords, _end_coords, walls) do
    if Enum.any?(walls, fn x -> x == current end) do
      :wall
    else
      nil
    end
  end

  def print_maze(maze) do
    maze.cells
    |> Enum.map(fn x -> draw_cell(x) end)
    |> Enum.chunk_every(maze.x)
  end

  def draw_cell(cell) do
    case cell.type do
      :wall -> "⬛️"
      :end_cell -> "🌟"
      :start_cell -> "🟢"
      _ -> "⬜️"
    end
  end
end
```

Lets start with a simple 8 by 8 board and initialise it with a start and stop position and a simple wall.

```elixir
Maze.initialise_maze(8, 8, {2, 2}, {7, 6}, [{3, 3}, {3, 4}, {4, 4}])
|> Maze.print_maze()
```

## The algorithm itself

We want to start at the first cell and evaluate each of its immediate neighbours and come up with a score for how good that cell is.

$$F = G + H$$

This is saying the fitness of a cell is:

G is the distance between the current node and the start node.

H is the heuristic — estimated distance from the current node to the end node.

See [Easy A* (star) Pathfinding](https://medium.com/@nicholas.w.swift/easy-a-star-pathfinding-7e6689c7f7b2)

### Algorithm steps

1. Add the starting square (or node) to the open list.
2. Repeat the following:

A) Look for the lowest F cost square on the open list. We refer to this as the current square.

B). Switch it to the closed list.

C) For each of the 8 squares adjacent to this current square …

1. If it is not walkable or if it is on the closed list, ignore it. Otherwise do the following.
2. If it isn’t on the open list, add it to the open list. Make the current square the parent of this square. Record the F, G, and H costs of the square.
3. If it is on the open list already, check to see if this path to that square is better, using G cost as the measure. A lower G cost means that this is a better path. If so, change the parent of the square to the current square, and recalculate the G and F scores of the square. If you are keeping your open list sorted by F score, you may need to resort the list to account for the change.

D) Stop when you:

Add the target square to the closed list, in which case the path has been found, or
Fail to find the target square, and the open list is empty. In this case, there is no path.

1. Save the path. Working backwards from the target square, go from each square to its parent square until you reach the starting square. That is your path.
